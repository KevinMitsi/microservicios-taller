pipeline {
    agent any

    tools {
        maven 'Maven'
    }

  environment {
      SONAR_TOKEN       = credentials('sonar_token')

      SONAR_HOST_URL    = 'http://sonarqube:9000'
      SONAR_PROJECT_KEY = 'msvc-security'
      SONAR_PROJECT_NAME = 'MSVC Security'

      MAVEN_OPTS = '-Xmx1024m'

      JAVA_HOME = '/opt/java/openjdk'
      PATH = "${JAVA_HOME}/bin:${env.PATH}"
  }

    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ Clonando repositorio...'
                checkout scm
                echo '‚úÖ Repositorio clonado exitosamente'
            }
        }

        stage('Clean') {
            steps {
                dir('msvc-security') {
                    echo 'üßπ Limpiando workspace...'
                    sh 'mvn clean'
                    echo '‚úÖ Workspace limpio'
                }
            }
        }

        stage('Build') {
            steps {
                dir('msvc-security') {
                    echo 'üî® Compilando proyecto...'
                    sh 'mvn compile -DskipTests'
                    echo '‚úÖ Proyecto compilado exitosamente'
                }
            }
        }

        stage('Unit & Integration Tests') {
            steps {
                dir('msvc-security') {
                    echo 'üß™ Ejecutando pruebas unitarias e integraci√≥n...'
                    sh 'mvn test'
                    echo '‚úÖ Pruebas completadas'
                }
            }
            post {
                always {
                    dir('msvc-security') {
                        junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
                    }
                }
            }
        }

        stage('Code Coverage') {
            steps {
                dir('msvc-security') {
                    echo 'üìä Generando reporte de cobertura con JaCoCo...'
                    sh 'mvn jacoco:report'
                    echo '‚úÖ Reporte de cobertura generado'
                }
            }
            post {
                always {
                    dir('msvc-security') {
                        jacoco(
                            execPattern: '**/target/jacoco.exec',
                            classPattern: '**/target/classes',
                            sourcePattern: '**/src/main/java',
                            exclusionPattern: '**/*Test*.class,**/*Config*.class,**/*Application*.class'
                        )
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('msvc-security') {
                    echo 'üîç Iniciando an√°lisis de calidad con SonarQube...'
                    withSonarQubeEnv('SonarQube') {
                        sh """
                            mvn sonar:sonar \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.projectName="${SONAR_PROJECT_NAME}" \
                            -Dsonar.host.url=${SONAR_HOST_URL} \
                            -Dsonar.login=${SONAR_TOKEN} \
                            -Dsonar.java.binaries=target/classes \
                            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                            -Dsonar.junit.reportPaths=target/surefire-reports
                        """
                    }
                    echo '‚úÖ An√°lisis de SonarQube completado'
                }
            }
        }

        stage('Quality Gate') {
            steps {
                dir('msvc-security') {
                    echo '‚è≥ Esperando resultado del Quality Gate...'
                    script {
                        timeout(time: 10, unit: 'MINUTES') {
                            // Intentar primero con el m√©todo est√°ndar (webhook)
                            try {
                                def qg = waitForQualityGate()

                                echo "üìä Quality Gate status: ${qg.status}"

                                if (qg.status != 'OK') {
                                    error "Quality Gate fall√≥: ${qg.status}"
                                }

                                echo '‚úÖ Quality Gate verificado exitosamente'
                            } catch (Exception webhookError) {
                                echo "‚ö†Ô∏è Webhook fall√≥, usando m√©todo alternativo..."
                                echo "Error: ${webhookError.message}"

                                // M√©todo alternativo: polling directo a la API
                                def maxAttempts = 60
                                def attempt = 0
                                def qgPassed = false

                                while (attempt < maxAttempts && !qgPassed) {
                                    sleep(time: 5, unit: 'SECONDS')

                                    def response = sh(
                                        script: """
                                            curl -s -u \${SONAR_TOKEN}: \
                                            "${SONAR_HOST_URL}/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}"
                                        """,
                                        returnStdout: true
                                    ).trim()

                                    echo "Intento ${attempt + 1}/${maxAttempts}"

                                    if (response.contains('"status":"OK"')) {
                                        qgPassed = true
                                        echo '‚úÖ Quality Gate aprobado (verificado v√≠a API)'
                                    } else if (response.contains('"status":"ERROR"')) {
                                        error '‚ùå Quality Gate fall√≥ (verificado v√≠a API)'
                                    } else if (response.contains('"status":"WARN"')) {
                                        echo '‚ö†Ô∏è Quality Gate con advertencias'
                                        qgPassed = true  // Puedes cambiar esto a false si quieres que falle
                                    }

                                    attempt++
                                }

                                if (!qgPassed) {
                                    error "‚è∞ Timeout esperando Quality Gate despu√©s de ${maxAttempts} intentos"
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Cucumber Reports') {
            steps {
                dir('msvc-security') {
                    echo 'ü•í Generando reportes de Cucumber...'
                    sh 'mvn verify -DskipUnitTests=false'
                    echo '‚úÖ Reportes de Cucumber generados'
                }
            }
            post {
                always {
                    dir('msvc-security') {
                        cucumber buildStatus: 'UNSTABLE',
                                reportTitle: 'Cucumber BDD Test Report',
                                fileIncludePattern: '**/cucumber-reports/*.json',
                                trendsLimit: 10,
                                failedFeaturesNumber: -1,
                                failedScenariosNumber: -1,
                                classifications: [
                                    [key: 'Microservicio', value: 'Security'],
                                    [key: 'Ambiente', value: 'CI/CD'],
                                    [key: 'Framework', value: 'Cucumber + Spring Boot']
                                ]
                    }
                }
            }
        }

        stage('Publish Reports') {
            steps {
                dir('msvc-security') {
                    echo 'üìà Publicando reportes en Jenkins...'

                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'target/site/jacoco',
                        reportFiles: 'index.html',
                        reportName: 'JaCoCo Coverage Report',
                        reportTitles: 'Code Coverage'
                    ])

                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'target/cucumber-html-reports',
                        reportFiles: 'overview-features.html',
                        reportName: 'Cucumber HTML Report',
                        reportTitles: 'BDD Test Results'
                    ])

                    echo '‚úÖ Reportes publicados exitosamente'
                }
            }
        }

        stage('Report Results') {
            steps {
                script {
                    echo 'üìã ======================================'
                    echo 'üìã RESUMEN DE EJECUCI√ìN DEL PIPELINE'
                    echo 'üìã ======================================'
                    echo "üì¶ Proyecto: ${env.JOB_NAME}"
                    echo "üî¢ Build: #${env.BUILD_NUMBER}"
                    echo "üåø Rama: ${env.GIT_BRANCH}"
                    echo "üîó SonarQube: ${SONAR_HOST_URL}/dashboard?id=${SONAR_PROJECT_KEY}"
                    echo 'üìã ======================================'
                    echo '‚úÖ Pipeline completado'
                    echo 'üìã ======================================'
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ ¬°BUILD EXITOSO! üéâ'
        }
        failure {
            echo '‚ùå BUILD FALLIDO'
            echo "üîó Revisa SonarQube: ${SONAR_HOST_URL}/dashboard?id=${SONAR_PROJECT_KEY}"
        }
        unstable {
            echo '‚ö†Ô∏è BUILD INESTABLE'
        }
        always {
            echo 'üßπ Pipeline finalizado'
        }
    }
}