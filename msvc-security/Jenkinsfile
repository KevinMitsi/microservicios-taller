pipeline {
    agent any

    tools {
        maven 'Maven'
        jdk 'JDK-21'
    }

    environment {
        DOCKER_IMAGE = 'kevinmitsi/msvc-security'
        DOCKER_CREDENTIALS = credentials('dockerhub-credentials')
        SONAR_TOKEN = credentials('sonarqube-token')
        MICROSERVICE_DIR = 'msvc-security'
    }

    stages {
        stage('Checkout') {
            steps {
                echo '📥 Clonando repositorio del proyecto...'
                checkout scm
                script {
                    // Mostrar información del commit
                    sh 'git log -1 --pretty=format:"%h - %an, %ar : %s"'
                    sh "echo 'Branch: ${env.GIT_BRANCH}'"
                }
            }
        }

        stage('Build') {
            steps {
                echo '🔨 Compilando proyecto...'
                dir("${MICROSERVICE_DIR}") {
                    sh 'mvn clean compile'
                }
            }
        }

        stage('Unit & Integration Tests') {
            steps {
                echo '🧪 Ejecutando pruebas unitarias y de integración (Cucumber)...'
                dir("${MICROSERVICE_DIR}") {
                    sh 'mvn test'
                    sh 'mvn verify'
                }
            }
            post {
                always {
                    // Publicar resultados de JUnit
                    junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'

                    // Publicar cobertura de código con JaCoCo
                    jacoco(
                        execPattern: '**/target/jacoco.exec',
                        classPattern: '**/target/classes',
                        sourcePattern: '**/src/main/java',
                        exclusionPattern: '**/config/**,**/dto/**,**/entity/**,**/model/**'
                    )

                    // Publicar reportes de Cucumber
                    cucumber buildStatus: 'UNSTABLE',
                        reportTitle: 'Cucumber BDD Test Report',
                        fileIncludePattern: '**/cucumber-reports/*.json',
                        trendsLimit: 10,
                        classifications: [
                            [key: 'Browser', value: 'REST API'],
                            [key: 'Environment', value: 'Test'],
                            [key: 'Microservice', value: 'msvc-security']
                        ]

                    // Publicar reportes HTML de Cucumber
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: "${MICROSERVICE_DIR}/target/cucumber-report-html",
                        reportFiles: 'overview-features.html',
                        reportName: 'Cucumber HTML Report',
                        reportTitles: 'Cucumber Test Results'
                    ])
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo '📊 Analizando calidad de código con SonarQube...'
                dir("${MICROSERVICE_DIR}") {
                    withSonarQubeEnv('SonarQube') {
                        sh '''
                            mvn sonar:sonar \
                            -Dsonar.projectKey=msvc-security \
                            -Dsonar.projectName="MSvc Security" \
                            -Dsonar.host.url=http://sonarqube:9000 \
                            -Dsonar.login=$SONAR_TOKEN \
                            -Dsonar.java.binaries=target/classes \
                            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                            -Dsonar.junit.reportPaths=target/surefire-reports \
                            -Dsonar.exclusions=**/config/**,**/dto/**,**/entity/**,**/model/**
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                echo '🚦 Verificando Quality Gate de SonarQube...'
                timeout(time: 5, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline abortado debido a fallo en Quality Gate: ${qg.status}"
                        }
                        echo "✅ Quality Gate pasado exitosamente"
                    }
                }
            }
        }

        stage('Package') {
            steps {
                echo '📦 Empaquetando aplicación...'
                dir("${MICROSERVICE_DIR}") {
                    sh 'mvn package -DskipTests'
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo '🐳 Construyendo imagen Docker...'
                dir("${MICROSERVICE_DIR}") {
                    script {
                        dockerImage = docker.build("${DOCKER_IMAGE}:${BUILD_NUMBER}")
                        docker.build("${DOCKER_IMAGE}:latest")
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            when {
                branch 'main'
            }
            steps {
                echo '🚀 Publicando imagen en Docker Hub...'
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-credentials') {
                        dockerImage.push("${BUILD_NUMBER}")
                        dockerImage.push("latest")
                    }
                }
            }
        }

        stage('Deploy to Development') {
            when {
                branch 'develop'
            }
            steps {
                echo '🌐 Desplegando en ambiente de desarrollo...'
                sh '''
                    docker-compose -f docker-compose.yml stop msvc-security
                    docker-compose -f docker-compose.yml rm -f msvc-security
                    docker-compose -f docker-compose.yml up -d msvc-security
                '''
            }
        }

        stage('Generate Test Report Summary') {
            steps {
                echo '📋 Generando resumen de reportes...'
                script {
                    def testResults = junit '**/target/surefire-reports/*.xml'
                    def summary = """
                    ╔════════════════════════════════════════════════════════╗
                    ║         RESUMEN DE EJECUCIÓN - MSVC SECURITY          ║
                    ╠════════════════════════════════════════════════════════╣
                    ║ Build: #${BUILD_NUMBER}
                    ║ Branch: ${env.GIT_BRANCH}
                    ║ Tests Totales: ${testResults.totalCount}
                    ║ Tests Exitosos: ${testResults.passCount}
                    ║ Tests Fallidos: ${testResults.failCount}
                    ║ Tests Omitidos: ${testResults.skipCount}
                    ║
                    ║ 📊 Reportes disponibles:
                    ║ - JUnit Test Results
                    ║ - JaCoCo Coverage Report
                    ║ - Cucumber BDD Report
                    ║ - SonarQube Quality Analysis
                    ╚════════════════════════════════════════════════════════╝
                    """
                    echo summary
                }
            }
        }
    }

    post {
        always {
            echo '🧹 Limpiando workspace...'
            // Archivar reportes antes de limpiar
            archiveArtifacts artifacts: '**/target/cucumber-reports/**/*.*', allowEmptyArchive: true
            archiveArtifacts artifacts: '**/target/cucumber-report-html/**/*.*', allowEmptyArchive: true
            archiveArtifacts artifacts: '**/target/site/jacoco/**/*.*', allowEmptyArchive: true
        }
        success {
            echo '✅ ¡Pipeline ejecutado exitosamente!'
            echo '📊 Todos los reportes están disponibles en la página del build'
            echo '🔍 Revisa SonarQube para análisis detallado de calidad'
            // Aquí podrías enviar notificaciones (Slack, email, etc.)
        }
        failure {
            echo '❌ Pipeline falló!'
            echo '⚠️ Revisa los logs y reportes para identificar el problema'
            // Aquí podrías enviar notificaciones de fallo
        }
    }
}

