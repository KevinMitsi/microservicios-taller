version: "3.9"

services:
  msvc-monitoring:
    image: kevinmitsi/msvc-monitoring:latest
    container_name: msvc-monitoring
    ports:
      - "8000:8000"
    networks:
      - msvc-net

  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - msvc-net

  promtail:
    image: grafana/promtail:2.9.0
    container_name: promtail
    volumes:
        - /var/lib/docker/containers:/var/lib/docker/containers:ro
        - /var/log:/var/log
        - ./promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
        - loki
    networks:
        - msvc-net

  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    ports:
        - "3000:3000"
    depends_on:
        - loki
    networks:
        - msvc-net

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    restart:
      always
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Web UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    networks:
      - msvc-net

  msvc-consumer:
    image: kevinmitsi/msvc-consumer:latest
    container_name: msvc-consumer
    ports:
      - "8081:8081"
    networks:
      - msvc-net
    depends_on:
      - msvc-saludo
      - msvc-security
    environment:
        LB_SECURITY_URL: http://msvc-security:8080
        LB_SALUDO_URL: http://msvc-saludo:80

  msvc-security:
    image: kevinmitsi/msvc-security:latest
    container_name: msvc-security
    ports:
      - "8080:8080"
    networks:
      - msvc-net
    environment:
        MONGO_HOST: mongo-security
        LB_ORCHESTRATOR_URL: http://msvc-orchestrator:8083
        MONGO_PORT: 27017
        MONGO_USERNAME: admin
        MONGO_PASSWORD: secret
        MONGO_DATABASE: bd_users
        RABBITMQ_HOST: rabbitmq
        RABBITMQ_PORT: 5672
        RABBITMQ_USER: admin
        RABBITMQ_PASS: admin
        LOGGING_URL: http://loki:3100
    depends_on:
      - loki
      - mongo-security
      - rabbitmq

  msvc-saludo:
    image: kevinmitsi/msvc-saludo:latest
    container_name: msvc-saludo
    ports:
      - "80:80"
    networks:
      - msvc-net

  msvc-delivery:
    image: kevinmitsi/msvc-delivery:latest
    container_name: msvc-delivery
    ports:
      - "8082:8082"
    networks:
      - msvc-net
    depends_on:
      #- msvc-saludo
      - msvc-security
      - mongo-security
      - rabbitmq
    environment:
        RABBITMQ_HOST: rabbitmq
        RABBITMQ_PORT: 5672
        RABBITMQ_USER: admin
        RABBITMQ_PASS: admin
        MAIL_USERNAME: ${MAIL_USERNAME}
        MAIL_PASSWORD: ${MAIL_PASSWORD}
        TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
        TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
        TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}

  msvc-orchestrator:
    image: kevinmitsi/msvc-orchestrator:latest
    container_name: msvc-orchestrator
    ports:
      - "8083:8083"
    networks:
      - msvc-net
    depends_on:
      #- msvc-saludo
      #- msvc-security
      - mongo-orchestrator
      - rabbitmq
    environment:
        RABBITMQ_HOST: rabbitmq
        RABBITMQ_PORT: 5672
        RABBITMQ_USER: admin
        RABBITMQ_PASS: admin
        MONGO_HOST: mongo-orchestrator
        MONGO_PORT: 27017
        MONGO_USERNAME: admin
        MONGO_PASSWORD: secret
        MONGO_DATABASE: orchestrator_db
#        LB_SECURITY_URL: http://msvc-security:8080
#        LB_SALUDO_URL: http://msvc-saludo:80

  # Base de datos MongoDB para msvc-security
  mongo-security:
    image: mongo:6.0
    container_name: mongo_security_db
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: secret
    volumes:
      - mongo_security_data:/data/db
    networks:
      - msvc-net

  # Base de datos MongoDB dedicada para msvc-orchestrator
  mongo-orchestrator:
    image: mongo:6.0
    container_name: mongo_orchestrator_db
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: secret
    volumes:
      - mongo_orchestrator_data:/data/db
    networks:
      - msvc-net

  # Jenkins - Motor de Integración Continua
  jenkins:
    image: jenkins/jenkins:lts-jdk17
    container_name: jenkins
    privileged: true
    user: root
    ports:
      - "9090:8080"      # Puerto web de Jenkins (host 9090 -> container 8080)
      - "50000:50000"    # Puerto para agentes
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - msvc-net
    restart: unless-stopped

  # SonarQube - Análisis de Calidad de Código
  sonarqube:
    image: sonarqube:lts-community
    container_name: sonarqube
    depends_on:
      - sonar-db
    ports:
      - "9000:9000"
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonar-db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - msvc-net
    restart: unless-stopped

  # PostgreSQL para SonarQube
  sonar-db:
    image: postgres:15-alpine
    container_name: sonar_db
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - sonar_db_data:/var/lib/postgresql/data
    networks:
      - msvc-net
    restart: unless-stopped

volumes:
  mongo_security_data:
  mongo_orchestrator_data:
  jenkins_home:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonar_db_data:

networks:
  msvc-net:
    driver: bridge
